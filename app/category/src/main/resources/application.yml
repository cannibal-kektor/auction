debug: true
#trace: true


#management:
#  endpoint:
#    health:
#      show-details: ALWAYS
#      show-components: ALWAYS
#    env:
#      show-values: ALWAYS
#  endpoints:
#    web:
#      exposure:
#        include: "*"


spring:
  application:
    name: Auction-Category
  main.banner-mode: off
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration

  #MessageSourceAutoConfiguration------------
  messages:
    basename: localization/messages
    use-code-as-default-message: false
    fallback-to-system-locale: false
    encoding: UTF-8
    always-use-message-format: false
    cache-duration: -1
  #-------------------------------------------


  #---LifecycleAutoConfiguration--------------
#  lifecycle:
#    timeout-per-shutdown-phase: 30s
  #-------------------------------------------

  #--JacksonAutoConfiguration------------------------
  jackson:
  #    constructor-detector:
  #    date-format:
  #    default-leniency:
      default-property-inclusion: always
  #    locale:
  #    property-naming-strategy:
  #    time-zone:
  #    visibility:
  #      GETTER: NON_PRIVATE
  #      //other mappings
  #    mapper:
  #      default-view-inclusion: true
  #      //mapper features
  #    deserialization:
  #      //deserialization features
  #    serialization:
  #      //serialization features
  #    generator:
  #      //generator features
  #    parser:
  #      //parser features
  #------------------------------------------------


  #--TaskExecutionAutoConfiguration------------------------
  task:
    execution:
      threadNamePrefix: Auction-Category-Thread-
      pool:
        core-size: 4
        max-size: 10
        allow-core-thread-timeout: true
        keep-alive: PT30S
        queue-capacity: 200
      shutdown:
        await-termination: true
        await-termination-period: PT30S  #60 sec example - P3DT5H40M30S = 3Days, 5Hours, 40 Minutes and 30 Seconds




  # ---DataSourceAutoConfiguration--------------------------------------
  datasource:
#    driver-class-name: org.postgresql.Driver #Auto-detected based on the URL by default
#    type: com.zaxxer.hikari.HikariDataSource #Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.
    url: jdbc:postgresql://localhost:5430/auction
    username: testUser
    password: testPassword
#    jndi-name:
#    embedded-database-connection: NONE|H2|DERBY|HSQLDB
#    name:
#    generate-unique-name: true

    hikari:
#      allow-pool-suspension:
#      auto-commit:
#      catalog:
#      connection-init-sql:
#      connection-test-query:
      connection-timeout: 20000
#      data-source-class-name:
#      data-source-j-n-d-i:
#      data-source-properties:
#      driver-class-name:
#      exception-override-class-name:
#      health-check-properties:
#      idle-timeout:
#      initialization-fail-timeout:
#      isolate-internal-queries:
#      jdbc-url:
#      keepalive-time:
#      leak-detection-threshold:
#      login-timeout:
      max-lifetime: 500000
      maximum-pool-size: 10
#      metrics-tracker-factory:
#      minimum-idle:
#      password:
#      pool-name:
#      read-only:
#      register-mbeans:
#      scheduled-executor:
#      schema:
#      transaction-isolation:
#      username:
#      validation-timeout:

  # -----------------------------------------------------

 #---JdbcTemplateAutoConfiguration-------------------------------

#  jdbc:
#    template:
#      fetch-size: -1
#      max-rows: -1
#      query-timeout:

  # -----------------------------------------------------

#---------TransactionAutoConfiguration---------------------------------

#  transaction:
#    default-timeout: PT30S
#    rollback-on-commit-failure:

  data:
    #-----JpaRepositoriesAutoConfiguration-------------------------
    jpa:
      repositories:
        enabled: true
        bootstrap-mode: deferred
#        bootstrap-mode: deferred|lazy|default

    #-----------------------------------------------------------
  #-----SqlInitializationAutoConfiguration-------------------------
#  sql:
#    init:
#      enabled: true
#      mode: always #    By default, SQL database initialization is only performed when using an embedded in-memory database. To always initialize an SQL database, irrespective of its type, set spring.sql.init.mode to always
#      platform: #Можно тогда использовать специфичные schema-${platform}.sql data-${platform}.sql
#      data-locations:
#      schema-locations:
#      encoding: UTF-8
#      continue-on-error: false
#      separator: ;
#      username:
#      password:

  # -----------------------------------------------------------------

  jpa:
#    database: DEFAULT|DB2|DERBY|H2|HANA|HSQL|INFORMIX|MYSQL|ORACLE|POSTGRESQL|SQL_SERVER|SYBASE #Target database to operate on, auto-detected by default. Can be alternatively set using the "databasePlatform" property.
#    database-platform: #Name of the target database to operate on, auto-detected by default. Can be alternatively set using the "Database" enum.
    #    Script-based DataSource initialization is performed, by default, before any JPA EntityManagerFactory
    #  beans are created. schema.sql can be used to create the schema for JPA-managed entities and data.sql can
    #  be used to populate it. While we do not recommend using multiple data source initialization technologies,
    #  if you want script-based DataSource initialization to be able to build upon the schema creation performed
    #  by Hibernate, set spring.jpa.defer-datasource-initialization to true. This will defer data source initialization
    #  until after any EntityManagerFactory beans have been created and initialized. schema.sql can then be used to make
    #  additions to any schema creation performed by Hibernate and data.sql can be used to populate it.
#    defer-datasource-initialization: true #Whether to defer DataSource initialization until after any EntityManagerFactory beans have been created and initialized
#
    open-in-view: false #Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request
#    mapping-resources: #Mapping resources (equivalent to "mapping-file" entries in persistence.xml).

    show-sql: true

    #JPA has features for DDL generation, and these can be set up to run on startup against the database. This is controlled through two external properties:
    #  spring.jpa.generate-ddl (boolean) switches the feature on and off and is vendor independent.
    #  spring.jpa.hibernate.ddl-auto (enum) is a Hibernate feature that controls the behavior in a more fine-grained way. This feature is described in more detail later in this guide.
#    generate-ddl: false
    hibernate:
      ddl-auto: validate
#      naming:
#        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#        implicit-strategy:
    properties:
# Альтернатива для генерации схемы и загрузки данных + возможность записать в файл скрипт генерации -
#  Вместо (spring.generate-ddl: true и spring.hibernate.ddl-auto (то есть не использовать Spring Boot SqlDataSourceScriptDatabaseInitializer из SqlInitializationAutoConfiguration))
#  Использовать spring.jpa.properties.jakarta.persistence.* - Смотри в org.hibernate.cfg.AvailableSettings
# + тогда можно убрать defer-datasource-initialization: true
# + тогда можно установить spring.sql.init.enabled=false
# + нужно указать spring.jpa.properties.hibernate.hbm2ddl.import_files_sql_extractor: org.hibernate.tool.schema.internal.script.MultiLineSqlScriptExtractor
#
#      jakarta:
#        persistence:
#          schema-generation:
#            database:
#              action: drop-and-create
#            create-source: metadata
#            create-source: metadata-then-script
#            create-script-source: schemaKek.sql (доп скрипт для генерации схемы)
#            drop-source: metadata
#            drop-script-source: MyDrop.sql
#            scripts:    # Генерация скрипта в файл
#              action: create
#              create-target: GeneratedCreate.sql
#              drop-target: GeneratedDrop.sql
#          sql-load-script-source: dataKek.sql  # Загрузка данных

      hibernate:
#        hbm2ddl:
#          import_files_sql_extractor: org.hibernate.tool.schema.internal.script.MultiLineSqlScriptExtractor #Многострочные выражения
        show_sql: true
        format_sql: true
        use_sql_comments: true
#        dialect: org.hibernate.dialect.PostgreSQLDialect
#        generate_statistics: true
#        order_inserts: true
#        batch_versioned_data: true
#        jdbc:
#          batch_size: 100

#org.hibernate.cfg.AvailableSettings В самом классе и в пакете все конфигурационные настройки Hibernate
# Добавляются в spring.jpa.properties.*


  #------WebMvcAutoConfiguration------------------------------------------------------
  web:
    resources:
      add-mappings: false  # проброс NoHandlerFoundException чтобы обрабатывать его в нашем @ControllerAdvice
#      static-locations: classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/
#      cache:
#        period:
#        use-last-modified: true
#        cachecontrol:
#          cache-private: true
#          cache-public: false
#          max-age:
#          must-revalidate: true
#          no-cache: true
#          no-store: true
#          no-transform: true
#          proxy-revalidate: true
#          s-max-age:
#          stale-if-error:
#          stale-while-revalidate:
#      chain:
#        enabled: false
#        cache: true
#        compressed: true
#        strategy:
#          content:
#            enabled: false
#            paths: /**
#          fixed:
#            enabled: false
#            paths: /**
#            version:
#    locale-resolver: ACCEPT_HEADER
#    locale:

#  mvc:
#    dispatch-options-request: true
#    dispatch-trace-request: true
#    log-request-details: true
#    publish-request-handled-events: true
#    servlet:
#      path: /
#      load-on-startup: -1
#    async:
#      request-timeout: PT10S
#    pathmatch:
#      matching-strategy: path-pattern-parser
#    contentnegotiation:
#      favor-parameter: true
#      parameter-name: testParam
#      media-types:
#        *
#    view:
#      prefix:
#      suffix:
#    message-codes-resolver-format: PREFIX_ERROR_CODE
#    static-path-pattern: /**
#    webjars-path-pattern: /webjars/**
#    format:
#      date: dd/MM/yyyy
#      time: HH:mm:ss
#      date-time: yyyy-MM-dd HH:mm:ss
#    log-resolved-exception: true
#    problemdetails:
#      enabled: true
#--------------------------------------------------------------------------


#  security:
#    user:
#      password: Test12345
#    filter:
#      order: 10



#logging.level.org.hibernate.stat=debug

#---SslAutoConfiguration--------------------------
#  ssl:
#    bundle:
#      jks.*:
#      pem.*:
#      watch:
#        file:
#          quiet-period:
#------------------------------------------------

logging:
  level:
    org:
      springframework:
        web: INFO
        security: INFO
      hibernate:
        stat: debug
        #        SQL: debug
        persister:
          collection: debug
        type:
          descriptor:
            sql:
              BasicBinder: TRACE
#    com:
#      zaxxer:
#        hikari: DEBUG
#    root: info

#org:
#  springframework:
#    security:
#      config:
#        annotation:
#          web:
#            builders:
#              WebSecurity:
#                debugEnabled: false

server:
#------ServletWebServerFactoryAutoConfiguration-----------------------
  address: 0.0.0.0 #https://stackoverflow.com/questions/23946369/how-to-configure-embedded-tomcat-integrated-with-spring-to-listen-requests-to-ip By default tomcat will bind to 0.0.0.0 and listen on all available addresses. There must be an environment restriction on the other addresses or ports if they are not working (like a firewall) . Simply add in application.properties file: server.address=0.0.0.0
  port: 8080
  server-header: TestServer
#  forward-headers-strategy: NATIVE|FRAMEWORK|NONE
#  max-http-request-header-size: 8KB
#  shutdown: graceful|immediate
#  compression:
#    enabled: true
#    min-response-size: 50B
#    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json,application/xml
#    excluded-user-agents:
#  http2:
#    enabled: true
#  ssl:
#    enabled:
#    ...
  servlet:
#    application-display-name: AuctionApplicationDisplayName
#    context-path:
#    context-parameters.testParam: testVal
    register-default-servlet: false
# ----HttpEncodingAutoConfiguration------------------------------
#    encoding:
#      enabled: true
#      charset: UTF-8
#      force: true
#      force-request: true
#      force-response: true
#      mapping.*:
# --------------------------------------------------------------
    jsp:
      registered: false
#      class-name: org.apache.jasper.servlet.JspServlet
#      init-parameters.testParam: testValue
#    session:
#      cookie:
#        domain:
#        path:
#        name:
#        comment:
#        http-only:
#        max-age:
#        same-site:
#        secure:
#      timeout:
#      persistent: true
#      session-store-directory:
#      tracking-modes: COOKIE | URL | SSL

#---------------------------------------------------------------------------

  #------ServletWebServerFactoryAutoConfiguration  + EmbeddedWebServerFactoryCustomizerAutoConfiguration----
#  tomcat:
#    accept-count: 100
#    additional-tld-skip-patterns:
#    background-processor-delay:
#    basedir: /someDir
#    connection-timeout: -1
#    keep-alive-timeout: -1
#    max-connections: 8192
#    max-http-form-post-size: 2MB
#    max-http-response-header-size: 8KB
#    max-keep-alive-requests: 100
#    max-swallow-size: 2MB
#    mbeanregistry:
#       enabled: false
#    processor-cache: 200
#    redirect-context-root: true
#    relaxed-path-chars:
#    relaxed-query-chars:
#    uri-encoding: UTF-8
#    use-relative-redirects: false
#    remoteip:
#       host-header: X-Forwarded-Host
#       port-header: X-Forwarded-Port
#       protocol-header: X-Forwarded-Proto
#       protocol-header-https-value: https
#       remote-ip-header: X-FORWARDED-FOR
#       internal-proxies:
#       trusted-proxies:
#    resource:
#      allow-caching: true
#      cache-ttl:
#    threads:
#      max: 200
#      min-spare: 10
#    accesslog:
#      enabled: true
#      buffered: true
#      encoding: UTF-8
#      locale:
#      directory: logs
#      max-days: -1
#      pattern: common
#      prefix: access_log
#      suffix: .log
#      rename-on-rotate: false
#      rotate: true
#      file-date-format: yyyy-MM-dd
#      request-attributes-enabled: false
#      check-exists: false
#      condition-if:
#      condition-unless:
#      ipv6-canonical: false
#  ----------------------------------------------------------

# --- org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration-----
#  error:
#    path: /error
#    whitelabel:
#      enabled: false
#    include-binding-errors: always
#    include-exception: true
#    include-message: on-param
#    include-stacktrace: on-param
#  --------------------------------------------------

#jwt:
#  private.key: classpath:cert/private.pem
#  public.key: classpath:cert/public.pem
