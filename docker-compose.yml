name: auction

services:


#  auctionCategories:
#    build:
#      context: ./app
#      dockerfile: ./bot/Dockerfile
#      additional_contexts:
#        cert_conf: conf/build
#      secrets:
#        - bot_credentials
#    depends_on:
#      rabbit01:
#        condition: service_healthy
#      elastic01:
#        condition: service_healthy
#      mongo01:
#        condition: service_healthy
#      setup-mongo:
#        condition: service_completed_successfully
#      elastic-agent:
#        condition: service_started
#    image: multisearch-telegram-bot
#    #    ports:
#    #      - "5005:5005"
#    healthcheck:
#      test: [ "CMD-SHELL", "test -f /tmp/healthy || exit 1" ]
#      interval: 30s
#      timeout: 5s
#    secrets:
#      - source: bot_credentials
#        target: /run/secrets/bot_credentials
#        uid: "1000"
#        gid: "1000"
#        mode: 0400
#    environment:
#      SPRING_CONFIG_IMPORT: file:/run/secrets/bot_credentials[.properties]
#    volumes:
#      - app-client-cert:/app/certs:ro
#    labels:
#      - "monitor-ecs"
#    networks:
#      - rabbitmq-net
#      - mongo-net
#      - elastic-net

  postgres_category:
    image: postgres:17.5-alpine
    container_name: postgres_category_container
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD:  ${POSTGRES_PASSWORD}
      POSTGRES_DB: auction
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_CATEGORY_PORT}:5432"
    volumes:
      - pgdata-category:/var/lib/postgresql/data
      - ./conf/category:/docker-entrypoint-initdb.d
    #    deploy:
    #      resources:
    #        limits:
    #          cpus: '0.50'
    #          memory: 512M
    #        reservations:
    #          cpus: '0.25'
    #          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d auction" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
  #    tty: true
  #    stdin_open: true
    networks:
      - postgres


  postgres_lot:
    image: postgres:17.5-alpine
    container_name: postgres_lot_container
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD:  ${POSTGRES_PASSWORD}
      POSTGRES_DB: auction
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_LOT_PORT}:5432"
    volumes:
      - pgdata-lot:/var/lib/postgresql/data
      - ./conf/lot:/docker-entrypoint-initdb.d
    #    deploy:
    #      resources:
    #        limits:
    #          cpus: '0.50'
    #          memory: 512M
    #        reservations:
    #          cpus: '0.25'
    #          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d auction" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    #    tty: true
    #    stdin_open: true
    networks:
      - postgres


  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "kektor@kek.com"
      PGADMIN_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD:  ${POSTGRES_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
      - ./conf/pg_admin/servers.json:/pgadmin4/servers.json
    ports:
      - "${PG_ADMIN_PORT}:80"
    restart: unless-stopped
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#          memory: 1G
    networks:
      - postgres


  kafka01:
    image: apache/kafka-native
    container_name: kafka_broker_01
    hostname: kafka01
    ports:
      - "9092:9092"
    environment:
      # KRaft core settings
      CLUSTER_ID: "auction-kafka-cluster-1"
      KAFKA_NODE_ID: 1 #1 (идентификатор ноды, которая является и контроллером и брокером)
      KAFKA_PROCESS_ROLES: "controller,broker"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka01:9093"
      # Listeners configuration
      KAFKA_LISTENERS: "EXTERNAL://:9092,CONTROLLER://:9093,INTERNAL://:19092"
      KAFKA_ADVERTISED_LISTENERS: "EXTERNAL://localhost:9092,INTERNAL://kafka01:19092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"

      # Cluster settings
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      # Security & management
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_BROKER_ID: 1
      # Storage configuration
      # Resource limits (adjust as needed)
#      KAFKA_HEAP_OPTS: "-Xmx1g -Xms1g"
#      KAFKA_LOG_DIRS: "/kafka/data"
#    user: root  # Временно используем root для настройки
#    command: >
#      sh -c "
#      mkdir -p /kafka/data &&
#      chown -R appuser:appuser /kafka/data &&
#      exec su-exec appuser /etc/confluent/docker/run
#      "
    volumes:
#      - kafka-data:/kafka/data
      - kafka-data:/tmp/kraft-combined-logs
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped


  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 9090:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
#    volumes:
#      - ~/kui/config.yml:/etc/kafkaui/dynamic_config.yaml
    networks:
      - kafka-net

networks:
  postgres:
  kafka-net:

volumes:
  kafka-data:
  pgdata-category:
  pgdata-lot:
  pgadmin-data:
